// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZoneSentry.Data;

#nullable disable

namespace ZoneSentry.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220723015000_Services")]
    partial class Services
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("HouseRealtyService", b =>
                {
                    b.Property<int>("RealtyServicesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScopeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RealtyServicesId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("HouseRealtyService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZoneSentry.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConstructionCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionCompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ZoneSentry.Models.ConstructionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConstructionCompanies");
                });

            modelBuilder.Entity("ZoneSentry.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Building")
                        .HasColumnType("INTEGER");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Housing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResidentialComplexId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialComplexId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("ZoneSentry.Models.PurchaseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NewOwnerId");

                    b.HasIndex("RealtyId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("ZoneSentry.Models.Realty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OwnedByCompany")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentPerMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SellCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Realties");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("RealtyServices");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RealtyId");

                    b.HasIndex("RealtyServiceId");

                    b.ToTable("RealtyServiceOrders");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Payment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("RealtyServiceOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RealtyServiceOrderId");

                    b.ToTable("RealtyServicePayments");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RealtyId");

                    b.HasIndex("RealtyServiceId");

                    b.ToTable("RealtyServiceRequests");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OwnedByCompany")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentPerMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RealtyId");

                    b.HasIndex("TenantId");

                    b.ToTable("RentAgreements");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Payment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentAgreementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("RentPayments");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentPerMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealtyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RealtyId");

                    b.HasIndex("TenantId");

                    b.ToTable("RentRequests");
                });

            modelBuilder.Entity("ZoneSentry.Models.ResidentialComplex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConstructionCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionCompanyId");

                    b.ToTable("ResidentialComplexes");
                });

            modelBuilder.Entity("HouseRealtyService", b =>
                {
                    b.HasOne("ZoneSentry.Models.RealtyService", null)
                        .WithMany()
                        .HasForeignKey("RealtyServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.House", null)
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZoneSentry.Models.ApplicationUser", b =>
                {
                    b.HasOne("ZoneSentry.Models.ConstructionCompany", "ConstructionCompany")
                        .WithMany("Employees")
                        .HasForeignKey("ConstructionCompanyId");

                    b.Navigation("ConstructionCompany");
                });

            modelBuilder.Entity("ZoneSentry.Models.House", b =>
                {
                    b.HasOne("ZoneSentry.Models.ResidentialComplex", "ResidentialComplex")
                        .WithMany("Houses")
                        .HasForeignKey("ResidentialComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialComplex");
                });

            modelBuilder.Entity("ZoneSentry.Models.PurchaseRequest", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", "NewOwner")
                        .WithMany()
                        .HasForeignKey("NewOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.Realty", "Realty")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewOwner");

                    b.Navigation("Realty");
                });

            modelBuilder.Entity("ZoneSentry.Models.Realty", b =>
                {
                    b.HasOne("ZoneSentry.Models.House", "House")
                        .WithMany("Realties")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.ApplicationUser", "Owner")
                        .WithMany("OwnedRealties")
                        .HasForeignKey("OwnerId");

                    b.Navigation("House");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyService", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", "Provider")
                        .WithMany("PrividedRealtyServices")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServiceOrder", b =>
                {
                    b.HasOne("ZoneSentry.Models.Realty", "Realty")
                        .WithMany("Services")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.RealtyService", "RealtyService")
                        .WithMany()
                        .HasForeignKey("RealtyServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realty");

                    b.Navigation("RealtyService");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServicePayment", b =>
                {
                    b.HasOne("ZoneSentry.Models.RealtyServiceOrder", "RealtyServiceOrder")
                        .WithMany()
                        .HasForeignKey("RealtyServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyServiceOrder");
                });

            modelBuilder.Entity("ZoneSentry.Models.RealtyServiceRequest", b =>
                {
                    b.HasOne("ZoneSentry.Models.Realty", "Realty")
                        .WithMany()
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.RealtyService", "RealtyService")
                        .WithMany()
                        .HasForeignKey("RealtyServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realty");

                    b.Navigation("RealtyService");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentAgreement", b =>
                {
                    b.HasOne("ZoneSentry.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("ZoneSentry.Models.Realty", "Realty")
                        .WithMany("RentAgreements")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.ApplicationUser", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Realty");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentPayment", b =>
                {
                    b.HasOne("ZoneSentry.Models.RentAgreement", "RentAgreement")
                        .WithMany("Payments")
                        .HasForeignKey("RentAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentAgreement");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentRequest", b =>
                {
                    b.HasOne("ZoneSentry.Models.Realty", "Realty")
                        .WithMany("RentRequests")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZoneSentry.Models.ApplicationUser", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realty");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ZoneSentry.Models.ResidentialComplex", b =>
                {
                    b.HasOne("ZoneSentry.Models.ConstructionCompany", "ConstructionCompany")
                        .WithMany("ResidentialComplexes")
                        .HasForeignKey("ConstructionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructionCompany");
                });

            modelBuilder.Entity("ZoneSentry.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnedRealties");

                    b.Navigation("PrividedRealtyServices");
                });

            modelBuilder.Entity("ZoneSentry.Models.ConstructionCompany", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ResidentialComplexes");
                });

            modelBuilder.Entity("ZoneSentry.Models.House", b =>
                {
                    b.Navigation("Realties");
                });

            modelBuilder.Entity("ZoneSentry.Models.Realty", b =>
                {
                    b.Navigation("PurchaseRequests");

                    b.Navigation("RentAgreements");

                    b.Navigation("RentRequests");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ZoneSentry.Models.RentAgreement", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ZoneSentry.Models.ResidentialComplex", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
